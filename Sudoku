.*
Problem:
Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (mat[][]). 
The task to print a solved Sudoku. For simplicity you may assume that there will be only one unique solution.
*/

#include <bits/stdc++.h>
using namespace std;
#define N 9

bool findlocation(int arr[N][N], int &r, int &c)
{
    for(r = 0; r < N; r++) {
        for(c = 0; c < N; c++) {
            if(arr[r][c] == 0) {
                return true;
            }
        }
    }
    return false;
}

bool samerow(int arr[N][N], int r, int num) {
    for(int c = 0; c < N; c++) {
        if(arr[r][c] == num) {
            return false;
        }
    }
    
    return true;
}

bool samecol(int arr[N][N], int c, int num) {
    for(int r = 0; r < N; r++) {
        if(arr[r][c] == num) {
            return false;
        }
    }
    
    return true;
}

bool samebox(int arr[N][N], int r, int c, int num) {
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            if(arr[i+r][j+c] == num) {
                return false;
            }
        }
    }
    
    return true;
}

bool isSafe(int arr[N][N], int r, int c, int num) 
{
    return (samerow(arr, r, num) && samecol(arr, c, num) 
            && samebox(arr, r-r%3, c-c%3, num) && arr[r][c] == 0);
}

bool sudoko(int arr[N][N]) {
    int r, c;
    if(!findlocation(arr, r, c)) {
        return true;
    }
    
    for(int i = 1; i <= 9; i++) {
        if(isSafe(arr, r, c, i)) {
            arr[r][c] = i;
            
            if(sudoko(arr)) {
                return true;
            }
            
            arr[r][c] = 0;
        }
    }
    
    return false;
}

int main() {
    
    int arr[9][9];
    int k;
    for(int i = 0; i < 9; i++) {
        for(int j = 0; j < 9; j++) {
            cin >> arr[i][j];
        }
    }
    
    if(sudoko(arr)) {
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
       
    } else {
        cout << "Solution is not possible" << endl;
    }
	    
	return 0;
}

/*
INPUT:
3 0 6 5 0 8 4 0 0
5 2 0 0 0 0 0 0 0
0 8 7 0 0 0 0 3 1 
0 0 3 0 1 0 0 8 0
9 0 0 8 6 3 0 0 5
0 5 0 0 9 0 6 0 0
1 3 0 0 0 0 2 5 0
0 0 0 0 0 0 0 7 4
0 0 5 2 0 6 3 0 0

OUTPUT:
3 1 6 5 7 8 4 9 2
5 2 9 1 3 4 7 6 8
4 8 7 6 2 9 5 3 1
2 6 3 4 1 5 9 8 7
9 7 4 8 6 3 1 2 5
8 5 1 7 9 2 6 4 3
1 3 8 9 4 7 2 5 6
6 9 2 3 5 1 8 7 4
7 4 5 2 8 6 3 1 9

*/
