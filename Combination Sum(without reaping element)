/*
Problem defination :
Given an array of integers A and a sum B, find all unique combinations in A where the sum is equal to B.
each number in A may only be used once in the combination.

Input:
First is T , no of test cases.
Every test case has three lines.
First line is N, size of array.
Second line contains N space seperated integers(x).
Third line is the sum B.

*/

#include <bits/stdc++.h>
using namespace std;

void findsum(vector<int> &arr, vector<int> &res, set<vector<int>> &final, int sum, int b, int index, int &flag)
{
    if(sum > b) {
        return;
    }
    if(sum == b) {
        flag = 1;
        final.insert(res);
    }
    
    for(int i = index; i < arr.size(); i++) {
        res.push_back(arr[i]);
        findsum(arr, res, final, sum+arr[i], b, i+1, flag);
        res.pop_back();
    }
}

int main() {
	//code
	int t;
	cin >> t;
	while(t--) {
	    int n, k, b;
	    cin >> n;
	    vector<int> arr;
	    for(int i = 0; i < n; i++) {
	        cin >> k;
	        arr.push_back(k);
	    }
	    cin >> b;
	    sort(arr.begin(), arr.end());
	    
	    vector<int> res;
	    set<vector<int>> final;
	    int sum = 0;
	    int index = 0; 
	    int flag = 0;
	    findsum(arr, res, final, sum, b, index, flag);
	    if(flag == 0) {
	        cout << "Empty";
	    }
	    for(auto it = final.begin(); it != final.end(); it++) {
	        vector<int> v = *it;
    	        
            cout << "(";
            for(int i = 0; i < v.size(); i++) {
                if(i == v.size()-1) {
                    cout << v[i];
                } else {
                    cout << v[i] << " ";
                }
            }
            cout << ")";
	    }
	    cout << endl;
	}
	return 0;
}


/*

INPUT :
3
5
1 2 2 3 4
4
7
10 1 2 7 6 1 5
8
5
8 1 8 6 8
12

OUTPUT:
(1 3)(2 2)(4)
(1 1 6)(1 2 5)(1 7)(2 6)
Empty

*/
